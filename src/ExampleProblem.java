import org.moeaframework.core.Solution;
import org.moeaframework.core.variable.EncodingUtils;
import org.moeaframework.core.variable.RealVariable;
import org.moeaframework.problem.AbstractProblem;

/**
 * 
 * @author drew This is the Kursawe problem
 */
public class ExampleProblem extends AbstractProblem {
    public ExampleProblem() {

        // First argument sets the number of decision variables
        // Second argument sets the number of objectives
        super(3, 2);
    }

    /**
     * This function is responsible for instantiating new instances of solutions
     * for the problem, and in doing so defines the decision variable types and
     * bounds
     */
    @Override
    public Solution newSolution() {
        // Solution variable needs the number of variables and objectives passed
        // to it
        Solution solution = new Solution(numberOfVariables, numberOfObjectives);

        for (int i = 0; i < numberOfVariables; i++) {

            // The bounds on all decision variables are between -5 and 5
            // for the Kursawe problem (not sure why)
            solution.setVariable(i, new RealVariable(-5.0, 5.0));
        }

        return solution;
    }

    /**
     * Evaluates solutions for the problem. A solution generated by the
     * optimization algorithm is passed as an argument to this method. The
     * decision variables contained in the solution given to this method are set
     * the values specified by the optimization algorithm
     */
    @Override
    public void evaluate(Solution solution) {
        // We use EncodingUtils to extract actual values for the decision
        // variables.
        // Since the decision variables are real valued, we use the "getReal"
        // method
        double[] x = EncodingUtils.getReal(solution);
        double f1 = 0.0;
        double f2 = 0.0;

        // The first function of the Kursawe problem
        for (int i = 0; i < numberOfVariables - 1; i++) {
            f1 += -10.0 * Math.exp(-0.2
                    * Math.sqrt(Math.pow(x[i], 2.0) + Math.pow(x[i + 1], 2.0)));
        }

        // The second function of the Kursawe problem
        for (int i = 0; i < numberOfVariables; i++) {
            f2 += Math.pow(Math.abs(x[i]), 0.8)
                    + 5.0 * Math.sin(Math.pow(x[i], 3.0));
        }

        // After calculating the objective functions, we can assign them
        solution.setObjective(0, f1);
        solution.setObjective(1, f2);
    }
}
